from contextlib import contextmanager

from telebot import types
from bot.utils.buttons import Buttons
from bot.utils.documents import Documents
from bot import bot

PARRENT_PATH = "prod_data/zakupki/zakupka_docs/"


class PurchasingDocuments:

    @staticmethod
    def purchasing_documents_menu(message: types.Message) -> types.Message:
        buttons = (
            '–ë–µ–∑–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–∫—É–ø–∫–∞',
            '–ó–∞–∫—É–ø–∫–∞ –í–ó–õ',
            '–ó–∞–∫—É–ø–∫–∞ —É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
            '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–∏ÃÜ –æ—Ç–±–æ—Ä',
            '–†–∞—Å—á–µ—Ç –ù–ú–¶',
            'üîô –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª –∑–∞–∫—É–ø–æ–∫',
        )
        markup = Buttons.create_keyboard_buttons(buttons, row_width=1)
        return bot.send_message(
            message.from_user.id,
            text="‚¨á –ö–æ–º–ø–ª–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–∫—É–ø–∫–∏",
            reply_markup=markup,
        )

    @staticmethod
    def no_alternative_purchase(message: types.Message) -> types.Message:
        documents = (
            f"{PARRENT_PATH}bez_alternative/bd_catalog.xlsx",
            f"{PARRENT_PATH}bez_alternative/tz.docx",
        )
        captions = (
            "1. –†–µ–µ—Å—Ç—Ä –ë–ê–ó",
            "2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
        )
        Documents.send_document_with_markup(message.chat.id, documents, captions)

    @staticmethod
    def purchase_vzl(message: types.Message) -> types.Message:
        documents = (
            f"{PARRENT_PATH}VZL/calc_nmc_info.xlsx",
            f"{PARRENT_PATH}VZL/info_vzl.docx",
            f"{PARRENT_PATH}VZL/tz_vzl.docx",
        )
        captions = (
            "1. –†–∞—Å—á–µ—Ç –ù–ú–¶ (–ü—Ä–æ—á–∏–∏ÃÜ –º–µ—Ç–æ–¥)",
            "2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
            "3. –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –∑–∞–∫—É–ø–∫–µ –í–ó–õ",
        )
        Documents.send_document_with_markup(message.chat.id, documents, captions)

    @staticmethod
    @contextmanager
    def purchasing_single_supplier(message: types.Message) -> types.Message:
        documents = (
            {
                "file": open(f"{PARRENT_PATH}one_postav/tz_one_person.docx", "rb"),
                "caption": "1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
            },
            {
                "file": open(f"{PARRENT_PATH}one_postav/analitics_info.docx", "rb"),
                "caption": "2. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∏—Ç–æ–≥–∞–º –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞",
            },
        )
        Documents.send_media_group_without_markup(message.chat.id, documents)

    @staticmethod
    def competitive_selection(message: types.Message) -> types.Message:
        documents = (
            f"{PARRENT_PATH}concurent/tz_concurent.docx",
            f"{PARRENT_PATH}concurent/ZKO_info.pdf",
        )
        captions = (
            "1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
            "2. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ó–ö–û",
        )
        Documents.send_document_with_markup(message.chat.id, documents, captions)

    @staticmethod
    @contextmanager
    def calculation_nmc(message: types.Message) -> types.Message:
        documents = (
            {
                "file": open(f"{PARRENT_PATH}calc_NMC/calc_zatrat.xlsx", "rb"),
                "caption": "–®–∞–±–ª–æ–Ω ‚Ññ1. –†–∞—Å—á–µ—Ç –ù–ú–¶ (–∑–∞—Ç—Ä–∞—Ç–Ω—ã–∏ÃÜ –º–µ—Ç–æ–¥)",
            },
            {
                "file": open(f"{PARRENT_PATH}calc_NMC/calc_rinok.xlsx", "rb"),
                "caption": "–®–∞–±–ª–æ–Ω ‚Ññ2. –†–∞—Å—á–µ—Ç –ù–ú–¶ (–º–µ—Ç–æ–¥ —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω)",
            },
            {
                "file": open(f"{PARRENT_PATH}calc_NMC/calc_tarif.xlsx", "rb"),
                "caption": "–®–∞–±–ª–æ–Ω ‚Ññ3. –†–∞—Å—á–µ—Ç –ù–ú–¶ (—Ç–∞—Ä–∏—Ñ–Ω—ã–∏ÃÜ –º–µ—Ç–æ–¥)",
            },
        )
        Documents.send_media_group_without_markup(message.chat.id, documents)
